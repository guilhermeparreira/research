fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
#f(u)
f <- function(y, mu){
return(2*sum((y*log(y/mu)+mu-y)))
}
yi <- c(7, 4, 4, 6, 5)
mu <- 1:50
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
# f'(u)
fprime <- function(y, mu){
return(-(2/mu)*sum(y) + 2*length(y))
}
#f''(u)
f_dprime <- function(y, mu){
return((2/mu^2)*sum(y))
}
taylor_ap <- function(mu, mu0, fprime, f_dprime, y){
value <- f(y, mu = mu0) +
(mu - mu0)*fprime(mu = mu0, y = y) +
(((mu-mu0)^2)/2)*f_dprime(y = y, mu = mu)
return(value)
}
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 20,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "red", lty = 2)
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 10,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
legend("topleft", legend = c("True","Função Verdadeira (mu0 = -20)","Taylor (mu0 = 0)"),lty = c(1,2,3), col = c(1,2,3), lwd = c(1,1,3), bty = "n")
#f(u)
f <- function(y, mu){
return(2*sum(y/mu-log(y/mu)-1))
}
#f(u)
f <- function(y, mu){
return(2*sum(y/mu-log(y/mu)-1))
}
yi <- c(2.35, 0.16, 0.56, 1.05, 0.51)
mu <- 1:50
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
# f'(u)
fprime <- function(y, mu){
return(-(2/(mu^2))*sum(y) + (2*length(y))/mu)
}
#f''(u)
f_dprime <- function(y, mu){
return((4/mu^3)*sum(y) -(2*length(y)/(mu^2)))
}
taylor_ap <- function(mu, mu0, fprime, f_dprime, y){
value <- f(y, mu = mu0) +
(mu - mu0)*fprime(mu = mu0, y = y) +
(((mu-mu0)^2)/2)*f_dprime(y = y, mu = mu)
return(value)
}
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 20,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "red", lty = 2)
log(0.16)
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 10,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
#f(u)
f <- function(y, mu){
return(2*sum((y/mu)-log(y/mu)-1))
}
#f(u)
f <- function(y, mu){
return(2*sum((y/mu)-log(y/mu)-1))
}
yi <- c(2.35, 0.16, 0.56, 1.05, 0.51)
mu <- 1:50
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
# f'(u)
fprime <- function(y, mu){
return((-2/(mu^2))*sum(y) + (2*length(y))/mu)
}
#f''(u)
f_dprime <- function(y, mu){
return((4/mu^3)*sum(y) -(2*length(y)/(mu^2)))
}
taylor_ap <- function(mu, mu0, fprime, f_dprime, y){
value <- f(y, mu = mu0) +
(mu - mu0)*fprime(mu = mu0, y = y) +
(((mu-mu0)^2)/2)*f_dprime(y = y, mu = mu)
return(value)
}
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 20,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "red", lty = 2)
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 10,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
legend("topleft", legend = c("Função Verdadeira","Taylor (mu0 = 20)","Taylor (mu0 = 10)"),lty = c(1,2,3), col = c(1,2,3), lwd = c(1,1,3), bty = "n")
#f(u)
f <- function(y, mu){
return(2*sum((y/mu)-log(y/mu)-1))
}
yi <- c(2.35, 0.16, 0.56, 1.05, 0.51)
mu <- 1:50
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
#f(u)
f <- function(y, mu){
return(sum(2*((y/mu)-log(y/mu)-1)))
}
yi <- c(2.35, 0.16, 0.56, 1.05, 0.51)
mu <- 1:50
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
#f(u)
f <- function(y, mu){
return(2*sum(y*log(y/mu) + (1-y)*log((1-y)/(1-mu))))
}
yi <- c(1,0,1,1,1)
mu <- 1:50
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
log(0)
out
mu
#f(u)
f <- function(y, mu){
return(2*sum(y*log(y/mu) + (1-y)*log((1-y)/(1-mu))))
}
yi <- c(1,0,1,1,1)
mu <- 2:50
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
f(yi, 2)
y <- yi
y
mu
log(y/mu)
mu <- 2
yi <- c(1,0,1,1,1)
mu <- 2
y <- yi
y/mu
log(y/mu)
y*log(y/mu)
(1-y)/(1-mu)
yi <- c(1,0,1,1,1)
mu <- seq(0.01,0.99, length.out = 50)
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
#f(u)
f <- function(y, mu){
return(2*sum(y*log(y/mu) + (1-y)*log((1-y)/(1-mu))))
}
yi <- c(1,1,1,1)
mu <- seq(0.01,0.99, length.out = 50)
y <- yi
f(yi, 2)
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
y
mu
mu <- 0.01
y*log(y/mu)
(1-y)
log((1-y)/(1-mu))
mu
(1-mu)
(1-y)/(1-mu)
log((1-y)/(1-mu))
#f(u)
f <- function(y, mu){
return(2*sum(y*log(y/mu) + (1+y)*log((1+mu)/(1+y))))
}
yi <- c(7,4,4,6,5)
mu <- seq(1,50, length.out = 50)
y <- yi
# y <- yi
# mu <- 0.01
# f(yi, 2)
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
# f'(u)
fprime <- function(y, mu){
return((-2/(mu))*sum(y) + (2/(1+mu))sum(1+y))
}
# f'(u)
fprime <- function(y, mu){
return((-2/(mu))*sum(y) + (2/(1+mu))*sum(1+y))
}
#f''(u)
f_dprime <- function(y, mu){
return((2/mu^2)*sum(y) -(2/(1+mu^2))*sum(1+y))
}
taylor_ap <- function(mu, mu0, fprime, f_dprime, y){
value <- f(y, mu = mu0) +
(mu - mu0)*fprime(mu = mu0, y = y) +
(((mu-mu0)^2)/2)*f_dprime(y = y, mu = mu)
return(value)
}
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 20,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "red", lty = 2)
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 10,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
#f(u)
f <- function(y, mu){
return(2*sum(y*log(y/mu) + (1+y)*log((1+mu)/(1+y))))
}
yi <- c(7,4,4,6,5)
mu <- seq(1,50, length.out = 50)
# y <- yi
# mu <- 0.01
# f(yi, 2)
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
# f'(u)
fprime <- function(y, mu){
return((-2/(mu))*sum(y) + (2/(1+mu))*sum(1+y))
}
#f''(u)
f_dprime <- function(y, mu){
return((2/mu^2)*sum(y) -(2/(1+mu^2))*sum(1+y))
}
taylor_ap <- function(mu, mu0, fprime, f_dprime, y){
value <- f(y, mu = mu0) +
(mu - mu0)*fprime(mu = mu0, y = y) +
(((mu-mu0)^2)/2)*f_dprime(y = y, mu = mu)
return(value)
}
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 20,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "red", lty = 2)
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 10,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
legend("topleft", legend = c("Função Verdadeira","Taylor (mu0 = 20)","Taylor (mu0 = 10)"),lty = c(1,2,3), col = c(1,2,3), lwd = c(1,1,3), bty = "n")
# f'(u)
fprime <- function(y, mu){
return((-2/(mu))*sum(y) + (2/(1+mu))*sum(1+y))
}
#f''(u)
f_dprime <- function(y, mu){
return((2/mu^2)*sum(y) -(2/(1+mu^2))*sum(1+y))
}
taylor_ap <- function(mu, mu0, fprime, f_dprime, y){
value <- f(y, mu = mu0) +
(mu - mu0)*fprime(mu = mu0, y = y) +
(((mu-mu0)^2)/2)*f_dprime(y = y, mu = mu)
return(value)
}
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 30,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "red", lty = 2)
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 10,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
legend("topleft", legend = c("Função Verdadeira","Taylor (mu0 = 30)","Taylor (mu0 = 10)"),lty = c(1,2,3), col = c(1,2,3), lwd = c(1,1,3), bty = "n")
#f(u)
f <- function(y, mu){
return(2*sum(y*log(y/mu) + (1+y)*log((1+mu)/(1+y))))
}
yi <- c(7,4,4,6,5)
mu <- seq(1,50, length.out = 50)
# y <- yi
# mu <- 0.01
# f(yi, 2)
out <- c()
for (i in 1:length(mu)){
out[i] <- f(yi, mu[i])
}
plot(out ~ mu, type = "l")
# f'(u)
fprime <- function(y, mu){
return((-2/(mu))*sum(y) + (2/(1+mu))*sum(1+y))
}
#f''(u)
f_dprime <- function(y, mu){
return((2/mu^2)*sum(y) -(2/(1+mu^2))*sum(1+y))
}
taylor_ap <- function(mu, mu0, fprime, f_dprime, y){
value <- f(y, mu = mu0) +
(mu - mu0)*fprime(mu = mu0, y = y) +
(((mu-mu0)^2)/2)*f_dprime(y = y, mu = mu)
return(value)
}
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 30,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "red", lty = 2)
lines(1:50, taylor_ap(mu = c(1:50),
mu0 = 10,
fprime = fprime,
f_dprime = f_dprime,
y = yi),
col = "green", lty = 3, lwd = 3)
legend("topleft", legend = c("Função Verdadeira","Taylor (mu0 = 30)","Taylor (mu0 = 10)"),lty = c(1,2,3), col = c(1,2,3), lwd = c(1,1,3), bty = "n")
fx <- function(x) {
return(exp(-(((x-5)^2)/2)))
}
soma_riemann(n = 100000,a = -150, b = 150, fx = fx)
soma_riemann <- function(n, a, b, fx, ...) {
intervalos <- seq(a, b, length = n)
ci <- c()
soma <- c()
for(i in 1:c(n-1)) {
Deltai <- (intervalos[i+1] - intervalos[i]) # tamanho do intervalo
ci[i] <- (intervalos[i+1] + intervalos[i])/2 # ponto central do intervalo
soma[i] <- fx(ci[i])*Deltai # cada elemento da soma
}
return(sum(soma))
}
soma_riemann <- Vectorize(soma_riemann, "n")
fx <- function(x) {
return(exp(-(((x-5)^2)/2)))
}
soma_riemann(n = 100000,a = -150, b = 150, fx = fx)
soma_riemann(n = 10000,a = -150, b = 150, fx = fx)
soma_riemann(n = 1000,a = -150, b = 150, fx = fx)
soma_riemann(n = 100,a = -150, b = 150, fx = fx)
soma_riemann(n = 1000,a = 0, b = 100, fx = fx)
fx <- function(x) {
return(x * exp(-x/5))
}
soma_riemann(n = 1000,a = 0, b = 100, fx = fx)
fx <- function(x) {
return(exp(-((2*(x-5)^2)/(27*x))))
}
soma_riemann(n = 1000,a = 0, b = 100, fx = fx)
fx <- function(x) {
return(exp(-(abs(x-5)/2)))
}
soma_riemann(n = 1000,a = 0, b = 100, fx = fx)
fx <- function(x) {
return((1/x)+(1/(x^3)))
}
soma_riemann(n = 1000,a = 1, b = 2, fx = fx)
set.seed(13403259)
y <- rnorm(100) # Simulação de um conjunto de valores adequados para yi
u <- -10:10 # Diferentes valores de u
mm <- matrix(0, nrow = 100, ncol = 21)
colnames(mm) <- -10:10
j <- 1
for (j in 1:21){
mm[, j] <- abs(y - u[j])
}
mm.sum <- colSums(mm)
# Esboço do gráfico da função
plot(mm.sum ~ u, type= c("b"))
f.perda.abs <- function(y, u){
return(sum(abs(y-u)))
}
optim(0, fn = f.perda.abs, y = y)
optim(-0.2422656, fn = f.perda.abs, y = y) # Mediana
optim(-0.5, fn = f.perda.abs, y = y)
median(y)
# optim(-0.2422656, fn = f.perda.abs, y = y) # Forçando a Mediana
# optim(-0.5, fn = f.perda.abs, y = y)
median(y)
x1 <- -50:49
b0 <- 10
b1 <- 2
set.seed(123)
y <- rnorm(100, mean = b0 + b1*x1, sd = 10)
plot(y ~ x1)
df <- expand.grid(b0 = 5:15,
b1 = 0:4)
df$perda.abs <- 0
for (i in 1:nrow(df)){
mu <- df[i, 1] + df[i, 2]*x1
perda <- sum(abs(y - mu))
df[i, 3] <- perda
}
df$b0 <- factor(df$b0)
df$b1 <- factor(df$b1)
ggplot(data = df, aes(x = b0, y = perda.abs, color = b1, group = b1)) +
geom_point() +
geom_line() +
labs(y = "Perda Absoluta")
fx.perda <- function(b, y, x){
mu <- b[1] + b[2]*x
return(sum(abs(y-mu)))
}
# Valor de bo e b1 que minimizam a função perda
optim(c(10, 2), fx.perda, y = y, x = x1)
# Valor de bo e b1 que minimizam a função perda
optim(c(10, 2), fx.perda, y = y, x = x1)$par
thm <- knit_theme$get("bclear")
library(knitr)
# Define esquema de cores para code highlight.
thm <- knit_theme$get("bclear")
# Define esquema de cores para code highlight.
thm <- knit_theme$get("bclear")
library(knitr)
# Define esquema de cores para code highlight.
thm <- knit_theme$get("bclear")
install.packages("knitr")
library(knitr)
# Define esquema de cores para code highlight.
thm <- knit_theme$get("bclear")
fx.2b <- function(x, theta){
choose(100, x)*exp((x*log(theta/(1-theta)) + 100*log(1-theta)))
}
fx.2b <- Vectorize(fx.2b, "theta")
theta = seq(0.02, 0.98, length.out = 50)
y <- fx.2b(50, theta)
# head(df)
plot(y ~ theta, type = "l")
fx.2b <- function(x, theta){
choose(100, x)*exp((x*log(theta/(1-theta)) + 100*log(1-theta)))
}
fx.2b <- Vectorize(fx.2b, "x")
x = seq(1, 100, length.out = 50)
y <- fx.2b(x, 0.5)
fx.2b <- function(x, theta){
choose(100, x)*exp((x*log(theta/(1-theta)) + 100*log(1-theta)))
}
fx.2b(x = c(50), theta = 0.5)
fx.2b <- function(x, theta){
choose(100, x)*exp((x*log(theta/(1-theta)) + 100*log(1-theta)))
}
fx.2b <- Vectorize(fx.2b, "x")
fx.2b(x = c(50,60), theta = 0.5)
x = seq(0, 100, length.out = 50)
y <- fx.2b(x, 0.5)
warnings()
choose(100, 0)
choose(100, 1)
choose(100, 100)
x = 0:100
y <- fx.2b(x, 0.5)
# head(df)
plot(y ~ x, type = "l")
lines(x, fx.2b(x, 0.8))
# head(df)
plot(y ~ x, type = "l", ylim = c(0, 0.3))
lines(x, fx.2b(x, 0.8))
lines(x, fx.2b(x, 0.2))
lines(x, fx.2b(x, 0.02))
lines(x, fx.2b(x, 0.98))
